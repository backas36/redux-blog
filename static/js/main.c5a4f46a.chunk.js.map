{"version":3,"sources":["utils.js","WebAPI.js","redux/reducers/userReducer.js","components/Header/Header.js","redux/reducers/postReducer.js","pages/HomePage/HomePage.js","pages/LoginPage/LoginPage.js","pages/AboutPage/AboutPage.js","pages/PostPage/PostPage.js","pages/AddNewPostPage/AddNewPostPage.js","pages/RegisterPage/RegisterPage.js","pages/PostsListPage/AllPostsPage.js","pages/EditPostPage/EditPostPage.js","components/App/App.js","redux/store.js","index.js"],"names":["TOKEN_NAME","setAuthToken","token","localStorage","setItem","getAuthToken","getItem","BASE_URL","getPosts","a","fetch","result","json","getLast5Posts","pageNum","eachPageAmount","login","username","password","method","headers","body","JSON","stringify","reuslt","getMe","delelePostAPI","id","postNewPost","title","patchPostAPI","data","editedTitle","editedBody","register","nickname","userReducer","createSlice","name","initialState","user","errorMsg","reducers","setUser","state","action","payload","setErrorMsg","actions","getLogin","dispatch","then","res","ok","message","catch","err","getUser","registerAPI","HeaderContainer","styled","header","SiteInfo","div","SiteName","Link","SiteDesc","NavbarList","Nav","Header","useDispatch","useSelector","store","to","onClick","postReducer","isLoadingPost","post","newPostResponse","posts","postErrorMsg","patchPostResponse","currentPageNum","setIsLoginPost","setPost","setNewPostResponse","setAllPosts","setPostErrorMsg","setPatchPostResponse","setCurrentPageNum","getPost","getSinglePost","console","log","newPost","getAllPosts","getPostsAPI","deletePost","patchPost","getSelectedPosts","PostsWrapper","main","PostWrapper","PostTitle","PostCreated","PostAuthor","PostDate","PostBody","LinkToPost","CurrentPage","PaginateWrapper","PaginateBtn","button","PostActions","PostActionBtn","HomePage","isLoading","useEffect","Post","createdAt","userId","Date","toLocaleString","handleDelClick","map","length","FormContainer","form","Button","InputTItle","label","ErrorMsg","LoginPage","useState","setUsername","setPassword","history","useHistory","handleSubmit","e","push","onSubmit","value","onChange","target","type","AboutWrapper","AboutTitle","AboutContent","p","AboutPage","h2","PostPage","useParams","FormWrapper","ButtonWrapper","AddNewPostPage","postTitle","setPostTitle","postBody","setPostBody","rows","RegisterPage","setNickname","password2","setPassword2","registerRes","getUserRes","PostsListPage","replace","EditPostPage","setEditedTitle","setEditedBody","placeholder","App","exact","path","children","configureStore","reducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wZAAMA,GAAa,QAENC,GAAe,SAAAC,GAC1BC,aAAaC,QAAQJ,GAAYE,IAGtBG,GAAe,SAAAH,GAC1B,OAAOC,aAAaG,QAAQN,KCNxBO,GAAW,qCAEJC,GAAQ,yCAAG,6BAAAC,EAAA,sEACDC,MAAM,GAAD,OAAIH,GAAJ,oDADJ,cAChBI,EADgB,yBAEfA,EAAOC,QAFQ,2CAAH,qDAKRC,GAAa,yCAAG,WAAOC,EAASC,GAAhB,gBAAAN,EAAA,sEACNC,MAAM,GAAD,OAAIH,GAAJ,oDAAwDO,EAAxD,mBAA0EC,EAA1E,kBADC,cACrBJ,EADqB,yBAEpBA,EAAOC,QAFa,2CAAH,wDASbI,GAAK,yCAAG,WAAOC,EAAUC,GAAjB,gBAAAT,EAAA,sEACEC,MAAM,GAAD,OAAIH,GAAJ,UAAsB,CAC9CY,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBN,WACAC,eARe,cACbM,EADa,yBAWZA,EAAOZ,QAXK,2CAAH,wDAcLa,GAAK,yCAAG,+BAAAhB,EAAA,6DACbP,EAAQG,KADK,SAEEK,MAAM,GAAD,OAAIH,GAAJ,OAAmB,CAC3Ca,QAAS,CACP,cAAgB,UAAhB,OAA2BlB,MAJZ,cAEbS,EAFa,yBAOZA,EAAOC,QAPK,2CAAH,qDASLc,GAAa,yCAAG,WAAOC,GAAP,kBAAAlB,EAAA,6DACrBP,EAAQG,KADa,SAENK,MAAM,GAAD,OAAIH,GAAJ,kBAAsBoB,GAAM,CACpDR,OAAQ,SACRC,QAAS,CACP,eAAgB,mBAChB,cAAgB,UAAhB,OAA2BlB,MANJ,cAErBS,EAFqB,yBASpBA,EAAOC,QATa,2CAAH,sDAWbgB,GAAW,yCAAG,WAAOC,EAAOR,GAAd,kBAAAZ,EAAA,6DACnBP,EAAQG,KADW,SAEJK,MAAM,GAAD,OAAIH,GAAJ,UAAsB,CAC9CY,OAAQ,OACRC,QAAS,CACP,eAAgB,mBAChB,cAAgB,UAAhB,OAA2BlB,IAE7BmB,KAAMC,KAAKC,UAAU,CACnBM,QACAR,WAVqB,cAEnBV,EAFmB,yBAalBA,EAAOC,QAbW,2CAAH,wDAeXkB,GAAY,yCAAG,WAAOH,EAAII,GAAX,sBAAAtB,EAAA,6DAClBuB,EAA4BD,EAA5BC,YAAaC,EAAeF,EAAfE,WACf/B,EAAQG,KAFY,SAGLK,MAAM,GAAD,OAAIH,GAAJ,kBAAsBoB,GAAM,CACpDR,OAAQ,QACRC,QAAS,CACP,eAAgB,mBAChB,cAAgB,UAAhB,OAA2BlB,IAE7BmB,KAAMC,KAAKC,UAAU,CACnBM,MAAOG,EACPX,KAAMY,MAXgB,cAGpBtB,EAHoB,yBAcnBA,EAAOC,QAdY,2CAAH,wDAgBZsB,GAAQ,yCAAG,WAAOjB,EAAUkB,EAAUjB,GAA3B,gBAAAT,EAAA,sEACDC,MAAM,GAAD,OAAIH,GAAJ,aAAyB,CACjDY,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBN,WACAkB,WACAjB,eATkB,cAChBP,EADgB,yBAYfA,EAAOC,QAZQ,2CAAH,0DC9ERwB,GAAcC,aAAY,CACrCC,KAAM,OACNC,aAAc,CACZC,KAAM,KACNC,SAAU,MAEZC,SAAU,CACRC,QAAS,SAACC,EAAOC,GACfD,EAAMJ,KAAOK,EAAOC,SAGtBC,YAAa,SAACH,EAAOC,GACnBD,EAAMH,SAAWI,EAAOC,YAOvB,GAAiCV,GAAYY,QAArCL,GAAR,GAAQA,QAASI,GAAjB,GAAiBA,YAEXE,GAAW,SAAChC,EAAUC,GAAX,OAAwB,SAACgC,GAC/C,OAAOlC,GAAMC,EAAUC,GACpBiC,MAAK,SAAAC,GACJ,OAAe,IAAXA,EAAIC,GAAiBH,EAASH,GAAYK,EAAIE,WAClDrD,GAAamD,EAAIlD,OACVkD,MAERG,OAAM,SAAAC,GACLN,EAASH,GAAYS,SAIdC,GAAU,kBAAM,SAACP,GAC5B,OAAOzB,KACJ0B,MAAK,SAAAC,GACJ,OAAe,IAAXA,EAAIC,IACNpD,GAAa,MACNiD,EAASH,GAAYK,EAAIE,YAElCJ,EAASP,GAAQS,EAAIrB,OACdqB,MAERG,OAAM,SAAAC,GACLN,EAASH,GAAYS,SASdtB,GAAW,SAACjB,EAAUkB,EAAUjB,GAArB,OAAkC,SAACgC,GACzD,OAAOQ,GAAYzC,EAAUkB,EAAUjB,GACpCiC,MAAK,SAAAC,GACJ,OAAe,IAAXA,EAAIC,GAAiBH,EAASH,GAAYK,EAAIE,WAClDrD,GAAamD,EAAIlD,OACVkD,MAERG,OAAM,SAAAC,GACLN,EAASH,GAAYS,SAIZpB,MAAf,Q,gBC/DMuB,GAAkBC,KAAOC,OAAV,yIAOfC,GAAWF,KAAOG,IAAV,+FAORC,GAAWJ,aAAOK,KAAPL,CAAH,yHAMRM,GAAWN,aAAOK,KAAPL,CAAH,8IAQRO,GAAaP,KAAOG,IAAV,8CAGVK,GAAMR,aAAOK,KAAPL,CAAH,gKAgCMS,GAtBA,WACb,IAAMnB,EAAWoB,eACX9B,EAAO+B,cAAY,SAAAC,GAAK,OAAIA,EAAMhC,KAAKA,QAI7C,OACE,gBAACmB,GAAD,WACE,gBAACG,GAAD,WACE,eAACE,GAAD,CAAUS,GAAG,IAAb,yBACA,eAACP,GAAD,CAAUO,GAAG,SAAb,mDAEF,gBAACN,GAAD,WACE,eAACC,GAAD,CAAKK,GAAG,cAAR,sCACCjC,GAAQ,eAAC4B,GAAD,CAAKK,GAAG,YAAR,6CACPjC,GAAQ,eAAC4B,GAAD,CAAKK,GAAG,SAAR,0BACTjC,GAAQ,eAAC4B,GAAD,CAAKK,GAAG,IAAIC,QAbN,WACnBxB,GDCwB,SAACA,GAC3BjD,GAAa,IACbiD,EAASP,GAAQ,WCSF,iCCrDJgC,GAActC,aAAY,CACrCC,KAAM,QACNC,aAAc,CACZqC,eAAe,EACfC,KAAM,GACNC,gBAAiB,KACjBC,MAAO,GACPC,aAAc,KACdC,kBAAmB,KACnBC,eAAgB,GAElBxC,SAAU,CACRyC,eAAgB,SAACvC,EAAOC,GACtBD,EAAMgC,cAAgB/B,EAAOC,SAE/BsC,QAAS,SAACxC,EAAOC,GACfD,EAAMiC,KAAOhC,EAAOC,SAEtBuC,mBAAoB,SAACzC,EAAOC,GAC1BD,EAAMkC,gBAAkBjC,EAAOC,SAEjCwC,YAAa,SAAC1C,EAAOC,GACnBD,EAAMmC,MAAQlC,EAAOC,SAEvByC,gBAAiB,SAAC3C,EAAOC,GACvBD,EAAMoC,aAAenC,EAAOC,SAE9B0C,qBAAsB,SAAC5C,EAAOC,GAC5BD,EAAMqC,kBAAoBpC,EAAOC,SAEnC2C,kBAAmB,SAAC7C,EAAOC,GACzBD,EAAMsC,eAAiBrC,EAAOC,YAM7B,GAQH6B,GAAY3B,QAPdmC,GADK,GACLA,eACAC,GAFK,GAELA,QACAC,GAHK,GAGLA,mBACAC,GAJK,GAILA,YAEAE,IANK,GAKLD,gBALK,GAMLC,sBACAC,GAPK,GAOLA,kBAGWC,GAAU,SAAC/D,GAAD,OAAQ,SAACuB,GAC9BA,EAASiC,IAAe,IH7CG,SAACxD,GAC5B,OAAOjB,MAAM,GAAD,OAAIH,GAAJ,kBAAsBoB,EAAtB,kBAAyCwB,MAAK,SAAAC,GAAG,OAAIA,EAAIxC,UG6CrE+E,CAAchE,GACXwB,MAAK,SAAAC,GACJF,EAASkC,GAAQhC,IACjBF,EAASiC,IAAe,OAEzB5B,OAAM,SAAAC,GACLoC,QAAQC,IAAIrC,QAGLsC,GAAU,SAACjE,EAAOR,GAAR,OAAiB,SAAA6B,GACtC,OAAOtB,GAAYC,EAAOR,GACvB8B,MAAK,SAAAC,GAEJ,OADAF,EAASmC,GAAmBjC,IACrBA,OAGA2C,GAAc,kBAAM,SAAA7C,GAC/BA,EAASiC,IAAe,IACxBa,KACG7C,MAAK,SAAAC,GACJF,EAASoC,GAAYlC,IACrBF,EAASiC,IAAe,OAEzB5B,OAAM,SAAAC,GACLoC,QAAQC,IAAIrC,QAILyC,GAAa,SAACtE,GAAD,OAAQ,SAAAuB,GAChC,OAAOxB,GAAcC,GAClBwB,MAAK,SAAAC,GACJ,OAAOA,KAERG,OAAM,SAAAC,GACLoC,QAAQC,IAAIrC,QAIL0C,GAAY,SAACvE,EAAII,GAAL,OAAc,SAAAmB,GAErC,OADAA,EAASiC,IAAe,IACjBrD,GAAaH,EAAII,GACrBoB,MAAK,SAAAC,GAGJ,OAFAF,EAASsC,GAAqBpC,IAC9BF,EAASiC,IAAe,IACjB/B,KAERG,OAAM,SAAAC,GACLoC,QAAQC,IAAIrC,QAIL2C,GAAmB,SAACrF,EAASC,GAAV,OAA6B,SAAAmC,GAC3DA,EAASiC,IAAe,IACxBtE,GAAcC,EAASC,GACpBoC,MAAK,SAAAC,GACJF,EAASoC,GAAYlC,IACrBF,EAASiC,IAAe,OAEzB5B,OAAM,SAAAC,GACLoC,QAAQC,IAAIrC,QAIHmB,MAAf,QClHMyB,GAAexC,KAAOyC,KAAV,sEAIZC,GAAc1C,KAAOG,IAAV,4MAUXwC,GAAY3C,aAAOK,KAAPL,CAAH,2MAUT4C,GAAc5C,KAAOG,IAAV,kEAIX0C,GAAa7C,KAAOG,IAAV,mDAIV2C,GAAW9C,KAAOG,IAAV,8FAKR4C,GAAW/C,KAAOG,IAAV,yMASR6C,GAAahD,aAAOK,KAAPL,CAAH,gUAiBViD,GAAcjD,KAAOG,IAAV,gDAIX+C,GAAkBlD,KAAOG,IAAV,uHAMfgD,GAAcnD,KAAOoD,OAAV,0LAYXC,GAAcrD,KAAOG,IAAV,oFAKXmD,GAAgBtD,KAAOoD,OAAV,kTAuGJG,GAnFE,WACf,IAAMjE,EAAWoB,eAEXS,EAAQR,cAAY,SAAAC,GAAK,OAAIA,EAAMO,MAAMA,SACzCG,EAAiBX,cAAY,SAAAC,GAAK,OAAIA,EAAMO,MAAMG,kBAClDkC,EAAY7C,cAAY,SAAAC,GAAK,OAAIA,EAAMO,MAAMH,iBAInDyC,sBAAU,WACRnE,EAASiD,GAAiBjB,EAHL,OAIpB,CAAChC,EAAUgC,IAEd,IAUMoC,EAAO,SAAC,GAAc,IAAZzC,EAAW,EAAXA,KACNhD,EAAuCgD,EAAvChD,MAAO0F,EAAgC1C,EAAhC0C,UAAW5F,EAAqBkD,EAArBlD,GAAIN,EAAiBwD,EAAjBxD,KAAMmG,EAAW3C,EAAX2C,OAC9BhF,EAAO+B,cAAY,SAAAC,GAAK,OAAIA,EAAMhC,KAAKA,QAO7C,OACE,qCACE,gBAAC8D,GAAD,WACE,eAACC,GAAD,CAAW9B,GAAE,iBAAY9C,GAAzB,SAAgCE,IAChC,gBAAC2E,GAAD,WACE,eAACC,GAAD,UAAa5B,EAAKrC,KAAKL,WAEvB,eAACuE,GAAD,UAAW,IAAIe,KAAKF,GAAWG,sBAEjC,eAACf,GAAD,UAAWtF,IACX,eAACuF,GAAD,CAAYnC,GAAE,iBAAY9C,GAA1B,uBACCa,GAAQA,EAAKb,KAAO6F,GACnB,gBAACP,GAAD,WACE,eAAC,KAAD,CAAMxC,GAAE,qBAAgB9C,GAAxB,SACE,eAACuF,GAAD,qBAIF,eAACA,GAAD,CAAexC,QAAS,kBAvBX,SAAC/C,GACtBuB,EAAS+C,GAAWtE,IACjBwB,MAAK,SAAAC,GAAG,OAAIF,EAASiD,GAAiBjB,EAtBtB,QA2CmByC,CAAehG,IAA7C,6BAQZ,OACE,qCACGyF,EAAY,8CACX,uCACE,eAAChB,GAAD,UACGrB,EAAM6C,KAAI,SAAA/C,GAAI,OACb,eAACyC,EAAD,CAAMzC,KAAMA,GAAWA,EAAKlD,SAGhC,gBAACmF,GAAD,WACG5B,EAAiB,GAChB,eAAC6B,GAAD,CAAarC,QAxDO,WAC1BQ,EAAiB,GACnBhC,EAASuC,GAAkBP,EAAiB,KAsDpC,iBAEF,eAAC2B,GAAD,UAAc3B,IAhED,KAiEZH,EAAM8C,QACL,eAACd,GAAD,CAAarC,QAtDO,WAC9BxB,EAASuC,GAAkBP,EAAiB,KAqDlC,2B,SCvLR4C,GAAgBlE,KAAOmE,KAAV,mQAYbC,GAASpE,KAAOoD,OAAV,kVAkBNiB,GAAarE,KAAOsE,MAAV,qIAQVC,GAAWvE,KAAOG,IAAV,mEA0DCqE,GArDG,WAChB,MAAgCC,oBAAS,IAAzC,oBAAOpH,EAAP,KAAiBqH,EAAjB,KACA,EAAgCD,oBAAS,IAAzC,oBAAOnH,EAAP,KAAiBqH,EAAjB,KACM9F,EAAW8B,cAAY,SAAAC,GAAK,OAAIA,EAAMhC,KAAKC,YAC3C+F,EAAUC,eAEVvF,EAAWoB,eAEjB+C,sBAAU,WACR,OAAO,kBAAMnE,EAASH,GAAY,UACjC,CAACG,IAEJ,IAAMwF,EAAY,yCAAG,WAAOC,GAAP,UAAAlI,EAAA,yDACnByC,EAASH,GAAY,OAChB9B,GAAaC,EAFC,yCAEgBgC,EAASH,GAAY,gDAFrC,gCAKCG,EAASD,GAAShC,EAAUC,IAL7B,iBAMRhB,MANQ,kEAOIgD,EAASO,MAPb,eAQN1B,MACTyG,EAAQI,KAAK,KATE,kDAYjB1F,EAASH,GAAY,qDAZJ,0DAAH,sDAgBlB,OACE,gBAAC+E,GAAD,CAAee,SAAUH,EAAzB,UACE,+BACE,gBAACT,GAAD,sBACE,wBAAOa,MAAO7H,EAAU8H,SAAU,SAAAJ,GAAC,OAAIL,EAAYK,EAAEK,OAAOF,eAGhE,+BACE,gBAACb,GAAD,sBAEE,wBAAOgB,KAAK,WAAWH,MAAO5H,EAAU6H,SAAU,SAAAJ,GAAC,OAAIJ,EAAYI,EAAEK,OAAOF,eAGhF,eAACd,GAAD,CAAQiB,KAAK,SAAb,mBACA,eAAC,KAAD,CAAMxE,GAAG,YAAT,SACE,eAACuD,GAAD,CAAQiB,KAAK,SAAb,wBAKDxG,GAAY,eAAC0F,GAAD,UAAW1F,QClGxByG,GAAetF,KAAOG,IAAV,sEAIZoF,GAAavF,KAAOG,IAAV,qFAMVqF,GAAexF,KAAOyF,EAAV,qGAoBHC,GAdG,WAChB,OACE,qCACE,gBAACJ,GAAD,WACE,eAACC,GAAD,uBACA,eAACC,GAAD,yvBCfF9C,GAAc1C,KAAOG,IAAV,sPAWXwC,GAAY3C,KAAO2F,GAAV,2BACT/C,GAAc5C,KAAOG,IAAV,kEAIX0C,GAAa7C,KAAOG,IAAV,mDAGV2C,GAAW9C,KAAOG,IAAV,8FAKR4C,GAAW/C,KAAOG,IAAV,yGAMRkD,GAAcrD,KAAOG,IAAV,oFAKXmD,GAAgBtD,KAAOoD,OAAV,kTAgEJwC,GA/CE,WACf,IAAM7H,EAAO8H,eAAP9H,GACA6G,EAAUC,eACVvF,EAAWoB,eACX8C,EAAY7C,cAAY,SAAAC,GAAK,OAAIA,EAAMO,MAAMH,iBAC7CC,EAAON,cAAY,SAAAC,GAAK,OAAIA,EAAMO,MAAMF,QACxCrC,EAAO+B,cAAY,SAAAC,GAAK,OAAIA,EAAMhC,KAAKA,QACrCX,EAAmCgD,EAAnChD,MAAOR,EAA4BwD,EAA5BxD,KAAMkG,EAAsB1C,EAAtB0C,UAAWC,EAAW3C,EAAX2C,OAEhCH,sBAAU,WACRnE,EAASwC,GAAQ/D,MAChB,CAACA,EAAIuB,IAMR,OACE,qCACGkE,EAAY,+CACX,qCACE,gBAAC,GAAD,WACE,eAAC,GAAD,UAAYvF,IACZ,gBAAC,GAAD,WACE,eAAC,GAAD,UAAagD,EAAKrC,KAAKL,WACvB,eAAC,GAAD,UAAW,IAAIsF,KAAKF,GAAWG,sBAEjC,eAAC,GAAD,UAAWrG,IACVmB,GAAQA,EAAKb,KAAO6F,GACnB,gBAAC,GAAD,WACE,eAAC,KAAD,CAAM/C,GAAE,qBAAgB9C,GAAxB,SACE,eAAC,GAAD,qBAIF,eAAC,GAAD,CAAe+C,QAtBN,WACrBxB,EAAS+C,GAAWtE,IACpB6G,EAAQI,KAAK,gBAoBD,+BCxFVc,GAAc9F,KAAOmE,KAAV,uQAaXC,GAASpE,KAAOoD,OAAV,sWAoBNiB,GAAarE,KAAOsE,MAAV,kQAiBVyB,GAAgB/F,KAAOG,IAAV,oDAGboE,GAAWvE,KAAOG,IAAV,mEAyDC6F,GAlDQ,WACrB,MAAkCvB,oBAAS,IAA3C,oBAAOwB,EAAP,KAAkBC,EAAlB,KACA,EAAgCzB,oBAAS,IAAzC,oBAAO0B,EAAP,KAAiBC,EAAjB,KACA,EAAgC3B,sBAAhC,oBAAO5F,EAAP,KAAiBM,EAAjB,KACMyF,EAAUC,eAEVvF,EAAWoB,eAEXoE,EAAY,yCAAG,6BAAAjI,EAAA,yDACnBsC,EAAY,MACP8G,GAAcE,EAFA,yCAEiBhH,EAAY,+CAF7B,gCAMIG,EAAS4C,GAAQ+D,EAAWE,IANhC,UAOC,KADZpJ,EANW,QAON0C,GAPM,yCAOWN,EAAYpC,EAAO2C,UAP9B,OAQjBkF,EAAQI,KAAK,UAAYjI,EAAOgB,IARf,kDAUjBoB,EAAY,8CAVK,0DAAH,qDAoBlB,OACE,gBAAC2G,GAAD,CAAab,SAAUH,EAAvB,UACE,+BACE,gBAAC,GAAD,sCACE,wBAAOI,MAAOe,EAAWd,SAAU,SAAAJ,GAAC,OAAImB,EAAanB,EAAEK,OAAOF,eAGlE,+BACE,gBAAC,GAAD,sCAEE,2BAAUA,MAAOiB,EAAUE,KAAM,KAAMlB,SAAU,SAAAJ,GAAC,OAAIqB,EAAYrB,EAAEK,OAAOF,eAG/E,gBAACa,GAAD,WACE,eAAC,GAAD,CAAQV,KAAK,SAAb,sCACA,eAAC,GAAD,CAAQA,KAAK,SAASvE,QArBH,WACvBoF,EAAa,IACbE,EAAY,IACZjH,EAAY,KAkBR,sCACCN,GAAY,eAAC,GAAD,UAAWA,WCtG1BqF,GAAgBlE,KAAOmE,KAAV,mQAYbC,GAASpE,KAAOoD,OAAV,oVAkBNiB,GAAarE,KAAOsE,MAAV,qIAQVC,GAAWvE,KAAOG,IAAV,mEA2ECmG,GArEM,WACnB,MAAgC7B,oBAAS,IAAzC,oBAAOpH,EAAP,KAAiBqH,EAAjB,KACA,EAAgCD,oBAAS,IAAzC,oBAAOlG,EAAP,KAAiBgI,EAAjB,KACA,EAAgC9B,oBAAS,IAAzC,oBAAOnH,EAAP,KAAiBqH,EAAjB,KACA,EAAkCF,oBAAS,IAA3C,oBAAO+B,EAAP,KAAkBC,EAAlB,KACM5H,EAAW8B,cAAY,SAAAC,GAAK,OAAIA,EAAMhC,KAAKC,YAC3CS,EAAWoB,eACXkE,EAAUC,eAEhBpB,sBAAU,WACR,OAAO,kBAAMnE,EAASH,GAAY,UACjC,CAACG,IAGJ,IAAMwF,EAAY,yCAAG,WAAOC,GAAP,kBAAAlI,EAAA,yDACdQ,GAAakB,GAAajB,GAAakJ,EADzB,yCAC2ClH,EAASH,GAAY,gDADhE,UAGf7B,IAAakJ,EAHE,yCAGgBlH,EAASH,GAAY,wEAHrC,gCAKSG,EAAShB,GAASjB,EAAUkB,EAAUjB,IAL/C,cAKXoJ,EALW,iBAMQpH,EAASO,MANjB,QAMX8G,EANW,OAOjB3E,QAAQC,IAAuB,IAAnByE,EAAYjH,IAA8B,IAAlBkH,EAAWlH,IACxB,IAAnBiH,EAAYjH,IAA8B,IAAlBkH,EAAWlH,IACrCmF,EAAQI,KAAK,KATE,kDAYjB1F,EAASH,GAAY,qDAZJ,0DAAH,sDAuBlB,OACE,gBAAC,GAAD,CAAe8F,SAAUH,EAAzB,UACE,+BACE,gBAAC,GAAD,sBACE,wBAAOI,MAAO7H,EAAU8H,SAAU,SAAAJ,GAAC,OAAIL,EAAYK,EAAEK,OAAOF,eAGhE,+BACE,gBAAC,GAAD,sBACE,wBAAOA,MAAO3G,EAAU4G,SAAU,SAAAJ,GAAC,OAAIwB,EAAYxB,EAAEK,OAAOF,eAGhE,+BACE,gBAAC,GAAD,sBAEE,wBAAOG,KAAK,WAAWH,MAAO5H,EAAU6H,SAAU,SAAAJ,GAAC,OAAIJ,EAAYI,EAAEK,OAAOF,eAGhF,+BACE,gBAAC,GAAD,8BAEE,wBAAOG,KAAK,WAAWH,MAAOsB,EAAWrB,SAAU,SAAAJ,GAAC,OAAI0B,EAAa1B,EAAEK,OAAOF,eAGlF,eAAC,GAAD,CAAQG,KAAK,QAAQvE,QA/BA,WACvBxB,EAASH,GAAY,OACrBuF,EAAY,IACZ6B,EAAY,IACZ5B,EAAY,IACZ8B,EAAa,KA0BX,mBACA,eAAC,GAAD,CAAQpB,KAAK,SAAb,sBACCxG,GAAY,eAAC,GAAD,UAAWA,QC7GxB2D,GAAexC,KAAOyC,KAAV,sEAIZC,GAAc1C,KAAOG,IAAV,4MAUXwC,GAAY3C,aAAOK,KAAPL,CAAH,2MAUT4C,GAAc5C,KAAOG,IAAV,kEAIX0C,GAAa7C,KAAOG,IAAV,mDAIV2C,GAAW9C,KAAOG,IAAV,8FAKR4C,GAAW/C,KAAOG,IAAV,yMASR6C,GAAahD,aAAOK,KAAPL,CAAH,0RAcVqD,GAAcrD,KAAOG,IAAV,sFAKXmD,GAAgBtD,KAAOoD,OAAV,oTA8EJwD,GA5DO,WACpB,IAAMtH,EAAWoB,eACX8C,EAAY7C,cAAY,SAAAC,GAAK,OAAIA,EAAMO,MAAMH,iBAC7CG,EAAQR,cAAY,SAAAC,GAAK,OAAIA,EAAMO,MAAMA,SACzCvC,EAAO+B,cAAY,SAAAC,GAAK,OAAIA,EAAMhC,KAAKA,QAE7C6E,sBAAU,WACRnE,EAAS6C,QACR,CAAC7C,IAEJ,IAKMoE,EAAO,SAAC,GAAc,IAAZzC,EAAW,EAAXA,KACNhD,EAAuCgD,EAAvChD,MAAO0F,EAAgC1C,EAAhC0C,UAAW5F,EAAqBkD,EAArBlD,GAAIN,EAAiBwD,EAAjBxD,KAAMmG,EAAW3C,EAAX2C,OACpC,OACE,qCACE,gBAAC,GAAD,WACE,eAAC,GAAD,CAAW/C,GAAE,iBAAY9C,GAAzB,SAAgCE,IAChC,gBAAC,GAAD,WACE,eAAC,GAAD,UAAagD,EAAKrC,KAAKL,WAEvB,eAAC,GAAD,UAAW,IAAIsF,KAAKF,GAAWG,sBAEjC,eAAC,GAAD,UAAWrG,IACX,eAAC,GAAD,CAAYoD,GAAE,iBAAY9C,GAA1B,uBACCa,GAAQA,EAAKb,KAAO6F,GACnB,gBAAC,GAAD,WACE,eAAC,KAAD,CAAM/C,GAAE,qBAAgB9C,GAAxB,SACE,eAAC,GAAD,qBAIF,eAAC,KAAD,CAAM8C,GAAE,cAAiBgG,SAAO,EAAhC,SAEE,eAAC,GAAD,CAAe/F,QAAS,kBA3Bf,SAAC/C,GACtBuB,EAAS+C,GAAWtE,IACjBwB,MAAK,SAAAC,GAAG,OAAIF,EAAS6C,SAyBkB4B,CAAehG,IAA7C,+BAUd,OACE,qCACGyF,EAAY,8CACX,eAAC,GAAD,UACGrC,EAAM6C,KAAI,SAAA/C,GAAI,OACb,eAAEyC,EAAF,CAAOzC,KAAMA,GAAWA,EAAKlD,YCrInC+H,GAAc9F,KAAOmE,KAAV,yQAaXC,GAASpE,KAAOoD,OAAV,wWAoBNiB,GAAarE,KAAOsE,MAAV,oQAiBVyB,GAAgB/F,KAAOG,IAAV,sDAGboE,GAAWvE,KAAOG,IAAV,qEA2EC2G,GAtEM,WACnB,MAAgCrC,sBAAhC,oBAAO5F,EAAP,KAAiBM,EAAjB,KACA,EAAsCsF,oBAAS,IAA/C,oBAAOrG,EAAP,KAAoB2I,EAApB,KACA,EAAoCtC,oBAAS,IAA7C,oBAAOpG,EAAP,KAAmB2I,EAAnB,KAEMpC,EAAUC,eACV9G,EAAO8H,eAAP9H,GACAuB,EAAWoB,eAEX8C,EAAY7C,cAAY,SAAAC,GAAK,OAAIA,EAAMO,MAAMH,iBAC7CC,EAAON,cAAY,SAAAC,GAAK,OAAIA,EAAMO,MAAMF,QAI9CwC,sBAAU,WACRnE,EAASwC,GAAQ/D,MAChB,CAACA,EAAIuB,IAER,IAAMwF,EAAY,yCAAG,6BAAAjI,EAAA,yDACnBsC,EAAY,MACPf,GAAgBC,EAFF,yCAEqBc,EAAY,+CAFjC,gCAIIG,EAASgD,GAAUvE,EAAI,CAAEK,cAAaC,gBAJ1C,OAIXtB,EAJW,OAKjB6H,EAAQI,KAAK,UAAYjI,EAAOgB,IALf,kDAOjBoB,EAAY,8CAPK,0DAAH,qDAgBlB,OACE,qCACGqE,EAAY,8CACX,gBAAC,GAAD,CAAayB,SAAUH,EAAvB,UACE,+BACE,gBAAC,GAAD,sCACE,wBACEI,MAAO9G,EACP+G,SAAU,SAAAJ,GAAC,OAAIgC,EAAehC,EAAEK,OAAOF,QACvC+B,YAAahG,EAAKhD,aAIxB,+BACE,gBAAC,GAAD,sCAEE,2BACEiH,MAAO7G,EACPgI,KAAM,KACNlB,SAAU,SAAAJ,GAAC,OAAIiC,EAAcjC,EAAEK,OAAOF,QACtC+B,YAAahG,EAAKxD,YAIxB,gBAAC,GAAD,WACE,eAAC,GAAD,CAAQ4H,KAAK,SAAb,sCACA,eAAC,GAAD,CAAQA,KAAK,SAASvE,QA/BP,WACvBiG,EAAe,IACfC,EAAc,IACd7H,EAAY,KA4BJ,sCACCN,GAAY,eAAC,GAAD,UAAWA,aCtErBqI,GAtCH,WACV,IAAM5H,EAAWoB,eAOjB,OANA+C,sBAAU,WACJhH,MACF6C,EAASO,QAEV,CAACP,IAGF,gBAAC,KAAD,WACE,eAAC,GAAD,IAEA,gBAAC,KAAD,WACE,eAAC,KAAD,CAAO6H,OAAK,EAACC,KAAK,IAAlB,SACE,eAAC,GAAD,MAEF,eAAC,KAAD,CAAOA,KAAK,SAAZ,SACE,eAAC,GAAD,MAEF,eAAC,KAAD,CAAOA,KAAK,SAAZ,SACE,eAAC,GAAD,MAEF,eAAC,KAAD,CAAOA,KAAK,aAAaC,SAAU,eAAC,GAAD,MACnC,eAAC,KAAD,CAAOD,KAAK,cAAZ,SACE,eAAC,GAAD,MAEF,eAAC,KAAD,CAAOA,KAAK,YAAZ,SACE,eAAC,GAAD,MAEF,eAAC,KAAD,CAAOA,KAAK,iBAAiBC,SAAU,eAAC,GAAD,MACvC,eAAC,KAAD,CAAOD,KAAK,YAAZ,SACE,eAAC,GAAD,aC9CKE,gBAAe,CAC5BC,QAAS,CACPpG,MAAOJ,GACPnC,KAAMJ,MCCVgJ,KAASC,OACP,eAAC,KAAMC,WAAP,UACE,eAAC,KAAD,CAAU9G,MAAOA,GAAjB,SACE,eAAC,GAAD,QAGJ+G,SAASC,eAAe,W","file":"static/js/main.c5a4f46a.chunk.js","sourcesContent":["const TOKEN_NAME = 'token'\n\nexport const setAuthToken = token => {\n  localStorage.setItem(TOKEN_NAME, token)\n}\n\nexport const getAuthToken = token => {\n  return localStorage.getItem(TOKEN_NAME)\n}","import { getAuthToken } from \"./utils\"\nconst BASE_URL = 'https://student-json-api.lidemy.me'\n\nexport const getPosts = async () => {\n  const result = await fetch(`${BASE_URL}/posts?_sort=createdAt&_order=desc&_expand=user`)\n  return result.json()\n}\n\nexport const getLast5Posts = async (pageNum, eachPageAmount) => {\n  const result = await fetch(`${BASE_URL}/posts?_sort=createdAt&_order=desc&_page=${pageNum}&_limit=${eachPageAmount}&_expand=user`)\n  return result.json()\n}\n\nexport const getSinglePost = (id) => {\n  return fetch(`${BASE_URL}/posts/${id}?_expand=user`).then(res => res.json())\n}\n\nexport const login = async (username, password) => {\n  const reuslt = await fetch(`${BASE_URL}/login`, {\n    method: 'POST',\n    headers: {\n      'content-type': 'application/json'\n    },\n    body: JSON.stringify({\n      username,\n      password\n    })\n  })\n  return reuslt.json()\n}\n\nexport const getMe = async () => {\n  const token = getAuthToken()\n  const result = await fetch(`${BASE_URL}/me`, {\n    headers: {\n      'authorization': `Bearer ${token}`\n    }\n  })\n  return result.json()\n}\nexport const delelePostAPI = async (id) => {\n  const token = getAuthToken()\n  const result = await fetch(`${BASE_URL}/posts/${id}`, {\n    method: 'DELETE',\n    headers: {\n      'content-type': 'application/json',\n      'authorization': `Bearer ${token}`\n    }\n  })\n  return result.json()\n}\nexport const postNewPost = async (title, body) => {\n  const token = getAuthToken()\n  const result = await fetch(`${BASE_URL}/posts`, {\n    method: 'POST',\n    headers: {\n      'content-type': 'application/json',\n      'authorization': `Bearer ${token}`\n    },\n    body: JSON.stringify({\n      title,\n      body\n    })\n  })\n  return result.json()\n}\nexport const patchPostAPI = async (id, data) => {\n  const { editedTitle, editedBody } = data\n  const token = getAuthToken()\n  const result = await fetch(`${BASE_URL}/posts/${id}`, {\n    method: 'PATCH',\n    headers: {\n      'content-type': 'application/json',\n      'authorization': `Bearer ${token}`\n    },\n    body: JSON.stringify({\n      title: editedTitle,\n      body: editedBody\n    })\n  })\n  return result.json()\n}\nexport const register = async (username, nickname, password) => {\n  const result = await fetch(`${BASE_URL}/register`, {\n    method: 'POST',\n    headers: {\n      'content-type': 'application/json'\n    },\n    body: JSON.stringify({\n      username,\n      nickname,\n      password\n    })\n  })\n  return result.json()\n}\n\n// 目前沒用到，以後可能會用到的 api\nexport const getUserNickname = async (userId) => {\n  const result = await fetch(`${BASE_URL}/users/${userId}`)\n  return result.json()\n}","import { createSlice } from '@reduxjs/toolkit'\nimport { login, getMe, register as registerAPI } from '../../WebAPI'\nimport { setAuthToken } from '../../utils'\n\nexport const userReducer = createSlice({\n  name: 'user',\n  initialState: {\n    user: null,\n    errorMsg: null,\n  },\n  reducers: {\n    setUser: (state, action) => {\n      state.user = action.payload\n    },\n\n    setErrorMsg: (state, action) => {\n      state.errorMsg = action.payload\n    },\n\n  },\n})\n\n\nexport const { setUser, setErrorMsg } = userReducer.actions\n\nexport const getLogin = (username, password) => (dispatch) => {\n  return login(username, password)\n    .then(res => {\n      if (res.ok === 0) return dispatch(setErrorMsg(res.message))\n      setAuthToken(res.token)\n      return res\n    })\n    .catch(err => {\n      dispatch(setErrorMsg(err))\n    })\n}\n\nexport const getUser = () => (dispatch) => {\n  return getMe()\n    .then(res => {\n      if (res.ok !== 1) {\n        setAuthToken(null)\n        return dispatch(setErrorMsg(res.message))\n      }\n      dispatch(setUser(res.data))\n      return res\n    })\n    .catch(err => {\n      dispatch(setErrorMsg(err))\n    })\n}\n\nexport const logout = () => (dispatch) => {\n  setAuthToken('')\n  dispatch(setUser(null))\n}\n\nexport const register = (username, nickname, password) => (dispatch) => {\n  return registerAPI(username, nickname, password)\n    .then(res => {\n      if (res.ok !== 1) return dispatch(setErrorMsg(res.message))\n      setAuthToken(res.token)\n      return res\n    })\n    .catch(err => {\n      dispatch(setErrorMsg(err))\n    })\n}\n\nexport default userReducer.reducer","import styled from '@emotion/styled'\n\nimport { Link } from 'react-router-dom'\nimport { logout } from \"../../redux/reducers/userReducer\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nconst HeaderContainer = styled.header`\n  height:64px;\n  display:flex;\n  justify-content:space-around;\n  align-items:center;\n  padding:20px 0;\n`\nconst SiteInfo = styled.div`\n  display:flex;\n  flex-direction:column;\n  align-items:center;\n`\n\n\nconst SiteName = styled(Link)`\n  font-size:32px;\n  font-weight:bold;\n  color:rgba(0,0,0, 0.6);\n  text-decoration:none;\n`\nconst SiteDesc = styled(Link)`\n  font-size:18px;\n  font-weight:300;\n  color:rgba(0,0,0, 0.6);\n  margin-top:12px;\n  text-decoration:none;\n\n`\nconst NavbarList = styled.div`\n  display:flex;\n`\nconst Nav = styled(Link)`\n  font-weight:bold;\n  font-size:18px;\n  color:rgba(0,0,0, 0.6);\n  text-decoration:none;\n\n  &+& {\n    margin-left:12px;\n  }\n`\nconst Header = () => {\n  const dispatch = useDispatch()\n  const user = useSelector(store => store.user.user)\n  const handleLogout = () => {\n    dispatch(logout())\n  }\n  return (\n    <HeaderContainer>\n      <SiteInfo>\n        <SiteName to=\"/\">Lidemy Blog</SiteName>\n        <SiteDesc to=\"/about\">Welcome to the blog of Lidemy-Yang</SiteDesc>\n      </SiteInfo>\n      <NavbarList>\n        <Nav to=\"/posts-list\">所有文章</Nav>\n        {user && <Nav to=\"/new-post\">發佈新文章</Nav>}\n        {!user && <Nav to=\"/login\">登入</Nav>}\n        {user && <Nav to=\"/\" onClick={handleLogout}>登出</Nav>}\n      </NavbarList>\n    </HeaderContainer>\n  )\n}\n\nexport default Header","import { createSlice } from '@reduxjs/toolkit'\nimport {\n  getSinglePost,\n  postNewPost,\n  delelePostAPI,\n  getPosts as getPostsAPI,\n  patchPostAPI,\n  getLast5Posts\n} from '../../WebAPI'\n\nexport const postReducer = createSlice({\n  name: 'posts',\n  initialState: {\n    isLoadingPost: true,\n    post: [],\n    newPostResponse: null,\n    posts: [],\n    postErrorMsg: null,\n    patchPostResponse: null,\n    currentPageNum: 1\n  },\n  reducers: {\n    setIsLoginPost: (state, action) => {\n      state.isLoadingPost = action.payload\n    },\n    setPost: (state, action) => {\n      state.post = action.payload\n    },\n    setNewPostResponse: (state, action) => {\n      state.newPostResponse = action.payload\n    },\n    setAllPosts: (state, action) => {\n      state.posts = action.payload\n    },\n    setPostErrorMsg: (state, action) => {\n      state.postErrorMsg = action.payload\n    },\n    setPatchPostResponse: (state, action) => {\n      state.patchPostResponse = action.payload\n    },\n    setCurrentPageNum: (state, action) => {\n      state.currentPageNum = action.payload\n    }\n  },\n})\n\n\nexport const {\n  setIsLoginPost,\n  setPost,\n  setNewPostResponse,\n  setAllPosts,\n  setPostErrorMsg,\n  setPatchPostResponse,\n  setCurrentPageNum\n} = postReducer.actions\n\nexport const getPost = (id) => (dispatch) => {\n  dispatch(setIsLoginPost(true))\n  getSinglePost(id)\n    .then(res => {\n      dispatch(setPost(res))\n      dispatch(setIsLoginPost(false))\n    })\n    .catch(err => {\n      console.log(err)\n    })\n}\nexport const newPost = (title, body) => dispatch => {\n  return postNewPost(title, body)\n    .then(res => {\n      dispatch(setNewPostResponse(res))\n      return res\n    })\n}\nexport const getAllPosts = () => dispatch => {\n  dispatch(setIsLoginPost(true))\n  getPostsAPI()\n    .then(res => {\n      dispatch(setAllPosts(res))\n      dispatch(setIsLoginPost(false))\n    })\n    .catch(err => {\n      console.log(err)\n    })\n\n}\nexport const deletePost = (id) => dispatch => {\n  return delelePostAPI(id)\n    .then(res => {\n      return res\n    })\n    .catch(err => {\n      console.log(err)\n    })\n}\n\nexport const patchPost = (id, data) => dispatch => {\n  dispatch(setIsLoginPost(true))\n  return patchPostAPI(id, data)\n    .then(res => {\n      dispatch(setPatchPostResponse(res))\n      dispatch(setIsLoginPost(false))\n      return res\n    })\n    .catch(err => {\n      console.log(err)\n    })\n}\n\nexport const getSelectedPosts = (pageNum, eachPageAmount) => dispatch => {\n  dispatch(setIsLoginPost(true))\n  getLast5Posts(pageNum, eachPageAmount)\n    .then(res => {\n      dispatch(setAllPosts(res))\n      dispatch(setIsLoginPost(false))\n    })\n    .catch(err => {\n      console.log(err)\n    })\n}\n\nexport default postReducer.reducer","import React, { useEffect } from 'react'\nimport styled from '@emotion/styled'\nimport { Link } from 'react-router-dom'\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { deletePost, getSelectedPosts, setCurrentPageNum } from '../../redux/reducers/postReducer'\n\n\n\nconst PostsWrapper = styled.main`\n  max-width:960px;\n  margin:30px auto;\n`\nconst PostWrapper = styled.div`\n  box-shadow: 0 4px 10px 0 rgb(0 0 0 / 20%), 0 4px 20px 0 rgb(0 0 0 / 19%);\n  padding:30px ;\n  background:#fff;\n  & + & {\n    margin-top:20px;\n  }\n  position:relative;\n`\n\nconst PostTitle = styled(Link)`\n  font-size:28px;\n  color:#000;\n  text-decoration:none;\n  overflow: hidden;\n    white-space: nowrap;\n    width: 80%;\n    text-overflow: ellipsis;\n    display: block;\n`\nconst PostCreated = styled.div`\n  display:flex;\n  margin-top:12px;\n`\nconst PostAuthor = styled.div`\n  margin-right:12px;\n`\n\nconst PostDate = styled.div`\n  font-weight:300;\n  color:rgba(0,0,0,0.6);\n  font-size:16px;\n`\nconst PostBody = styled.div`\n  margin-top:30px;\n  font-size:18px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  display: -webkit-box;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n`\nconst LinkToPost = styled(Link)`\n  margin-top:30px;\n  display:inline-block;\n  color:rgba(0,0,0,0.6);\n  text-decoration:none;\n  border:1px solid #ccc;\n  padding:8px 24px;\n  background:#fff;\n  cursor:pointer;\n  transition: background 0.2s;\n  &:hover{\n    background:#ccc;\n  }\n  & + & {\n    margin-left:8px;\n  }\n`\nconst CurrentPage = styled.div`\n  font-size:18px;\n`\n\nconst PaginateWrapper = styled.div`\n  display:flex;\n  align-items:center;\n  margin-bottom:40px;\n  justify-content:center;\n`\nconst PaginateBtn = styled.button`\n  border:0;\n  text-decoration:underline;\n  margin:0 12px;\n  cursor:pointer;\n  opacity:0.5;\n  transition: opacity .5s;\n  &:hover{\n    opacity:1;\n  }\n`\n\nconst PostActions = styled.div`\n  position:absolute;\n  right: 30px;\n  bottom: 30px;\n`\nconst PostActionBtn = styled.button`\n  margin-top:30px;\n  margin-left:8px;\n  display:inline-block;\n  color:rgba(0,0,0,0.6);\n  text-decoration:none;\n  border:1px solid #ccc;\n  padding:8px 24px;\n  background:#fff;\n  cursor:pointer;\n  transition: background 0.2s;\n  &:hover{\n    background:#ccc;\n  }\n  \n`\n\n\n\n\nconst HomePage = () => {\n  const dispatch = useDispatch()\n\n  const posts = useSelector(store => store.posts.posts)\n  const currentPageNum = useSelector(store => store.posts.currentPageNum)\n  const isLoading = useSelector(store => store.posts.isLoadingPost)\n\n  const eachPageAmount = 10\n\n  useEffect(() => {\n    dispatch(getSelectedPosts(currentPageNum, eachPageAmount))\n  }, [dispatch, currentPageNum])\n\n  const handleClickDecrementBtn = () => {\n    if (currentPageNum > 1) {\n      dispatch(setCurrentPageNum(currentPageNum - 1))\n    }\n  }\n\n  const handleClickIncrementBtn = () => {\n    dispatch(setCurrentPageNum(currentPageNum + 1))\n  }\n\n  const Post = ({ post }) => {\n    const { title, createdAt, id, body, userId } = post\n    const user = useSelector(store => store.user.user)\n\n    const handleDelClick = (id) => {\n      dispatch(deletePost(id))\n        .then(res => dispatch(getSelectedPosts(currentPageNum, eachPageAmount)))\n    }\n\n    return (\n      <>\n        <PostWrapper>\n          <PostTitle to={`/posts/${id}`}>{title}</PostTitle>\n          <PostCreated>\n            <PostAuthor>{post.user.nickname}</PostAuthor>\n\n            <PostDate>{new Date(createdAt).toLocaleString()}</PostDate>\n          </PostCreated>\n          <PostBody>{body}</PostBody>\n          <LinkToPost to={`/posts/${id}`}>Read More</LinkToPost>\n          {user && user.id === userId && (\n            <PostActions>\n              <Link to={`/edit-post/${id}`}>\n                <PostActionBtn>\n                  Edit\n                </PostActionBtn>\n              </Link>\n              <PostActionBtn onClick={() => handleDelClick(id)}>Delete</PostActionBtn>\n            </PostActions>\n          )}\n        </PostWrapper>\n      </>\n    )\n  }\n\n  return (\n    <>\n      {isLoading ? <div>Loading...</div> : (\n        <>\n          <PostsWrapper>\n            {posts.map(post => (\n              <Post post={post} key={post.id} />\n            ))}\n          </PostsWrapper>\n          <PaginateWrapper>\n            {currentPageNum > 1 && (\n              <PaginateBtn onClick={handleClickDecrementBtn}>pre</PaginateBtn>\n            )}\n            <CurrentPage>{currentPageNum}</CurrentPage>\n            {posts.length === eachPageAmount && (\n              <PaginateBtn onClick={handleClickIncrementBtn}>next</PaginateBtn>\n            )}\n          </PaginateWrapper>\n        </>\n      )}\n\n    </>\n  )\n}\n\nexport default HomePage","import React, { useEffect, useState } from 'react'\nimport styled from '@emotion/styled'\nimport { useHistory, Link } from 'react-router-dom'\n\n\nimport { getLogin, getUser, setErrorMsg } from '../../redux/reducers/userReducer'\nimport { useDispatch, useSelector } from 'react-redux'\n\nconst FormContainer = styled.form`\n  max-width:960px;\n  margin:30px auto;\n  box-shadow:0 4px 10px 0 rgb(0 0 0 / 20%), 0 4px 20px 0 rgb(0 0 0 / 19%);\n  text-align:center;\n  padding:30px 0;\n  background-color:#fff;\n\n  & div + div {\n    margin-top:20px;\n  }\n`\nconst Button = styled.button`\n  margin-top:60px;\n  padding:8px 24px;\n  border:1px solid #ccc;\n  cursor:pointer;\n  background-color:#fff;\n  border-radius:4px;\n  font-weight:bold;\n  font-size:18px;\n  color:rgba(0,0,0, 0.6);\n  transition:background-color 0.2s;\n  margin-left:20px;\n\n  &:hover {\n    background-color:#ccc;\n  }\n\n`\nconst InputTItle = styled.label`\n  font-weight:bold;\n  font-size:18px;\n  color:rgba(0,0,0, 0.6);\n  & input{\n    margin:0 12px;\n  }\n`\nconst ErrorMsg = styled.div`\n  margin-top:20px;\n  color:#ef4a52;\n`\n\nconst LoginPage = () => {\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const errorMsg = useSelector(store => store.user.errorMsg)\n  const history = useHistory()\n\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    return () => dispatch(setErrorMsg(null))\n  }, [dispatch])\n\n  const handleSubmit = async (e) => {\n    dispatch(setErrorMsg(null))\n    if (!username || !password) return dispatch(setErrorMsg('請填入完整資料'))\n\n    try {\n      const res = await dispatch(getLogin(username, password))\n      if (!res.token) return\n      const reuslt = await dispatch(getUser())\n      if (reuslt.data) {\n        history.push('/')\n      }\n    } catch {\n      dispatch(setErrorMsg('請稍後再登入看看'))\n    }\n  }\n\n  return (\n    <FormContainer onSubmit={handleSubmit}>\n      <div>\n        <InputTItle>username\n          <input value={username} onChange={e => setUsername(e.target.value)} />\n        </InputTItle>\n      </div>\n      <div>\n        <InputTItle>\n          password\n          <input type=\"password\" value={password} onChange={e => setPassword(e.target.value)} />\n        </InputTItle>\n      </div>\n      <Button type=\"submit\">Login</Button>\n      <Link to=\"/register\">\n        <Button type=\"button\">\n          Register\n        </Button>\n      </Link>\n\n      {errorMsg && <ErrorMsg>{errorMsg}</ErrorMsg>}\n    </FormContainer>\n  )\n}\n\nexport default LoginPage","import styled from \"@emotion/styled\"\nconst AboutWrapper = styled.div`\n  max-width:960px;\n  margin:60px auto;\n`\nconst AboutTitle = styled.div`\n  font-size:30px;\n  color:#777;\n  text-align:center;\n`\n\nconst AboutContent = styled.p`\n  margin-top:50px;\n  padding:0 20px;\n  color:#888;\n  line-height:2;\n`\nconst AboutPage = () => {\n  return (\n    <>\n      <AboutWrapper>\n        <AboutTitle>ABOUT ME</AboutTitle>\n        <AboutContent>\n          這是在 Lidemy 程式導師計畫的最後一個實作作業，此刻的我也開始投履歷了，11/19 有個面試，希望一切順利。\n          也很感謝這半年陪伴的同學，助教還有 Huli，不管是技術方面，這計畫連心理層面也都有幫我上了一堂課，不管最後工作是否有順利找到，這段日子都是我人生中重要的歷程之一。\n        </AboutContent>\n      </AboutWrapper>\n    </>\n  )\n}\n\nexport default AboutPage","import React, { useEffect } from \"react\";\nimport styled from '@emotion/styled'\nimport { Link, useHistory } from \"react-router-dom\"\nimport { useParams } from \"react-router\";\nimport { getPost, deletePost } from \"../../redux/reducers/postReducer\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nconst PostWrapper = styled.div`\n  max-width:960px;\n  min-height:60vh;\n  margin:30px auto;\n  padding:10px;\n  box-shadow: 0 4px 10px 0 rgb(0 0 0 / 20%), 0 4px 20px 0 rgb(0 0 0 / 19%);\n  padding:30px ;\n  background:#fff;\n\n  position:relative;\n`\nconst PostTitle = styled.h2``\nconst PostCreated = styled.div`\n  display:flex;\n  margin-top:12px;\n`\nconst PostAuthor = styled.div`\n  margin-right:12px;\n`\nconst PostDate = styled.div`\n  font-weight:300;\n  color:rgba(0,0,0,0.6);\n  font-size:16px;\n`\nconst PostBody = styled.div`\n  margin-top:80px;\n  font-size:18px;\n  padding:20px;\n  line-height:2em;\n`\nconst PostActions = styled.div`\n  position:absolute;\n  right: 10px;\n  bottom: 10px;\n`\nconst PostActionBtn = styled.button`\n  margin-top:30px;\n  margin-left:8px;\n  display:inline-block;\n  color:rgba(0,0,0,0.6);\n  text-decoration:none;\n  border:1px solid #ccc;\n  padding:8px 24px;\n  background:#fff;\n  cursor:pointer;\n  transition: background 0.2s;\n  &:hover{\n    background:#ccc;\n  }\n  \n`\n\nconst PostPage = () => {\n  let { id } = useParams()\n  const history = useHistory()\n  const dispatch = useDispatch()\n  const isLoading = useSelector(store => store.posts.isLoadingPost)\n  const post = useSelector(store => store.posts.post)\n  const user = useSelector(store => store.user.user)\n  const { title, body, createdAt, userId } = post\n\n  useEffect(() => {\n    dispatch(getPost(id))\n  }, [id, dispatch])\n\n  const handleDelClick = () => {\n    dispatch(deletePost(id))\n    history.push('/posts-list')\n  }\n  return (\n    <>\n      {isLoading ? <div>loading ...</div> : (\n        <>\n          <PostWrapper>\n            <PostTitle>{title}</PostTitle>\n            <PostCreated>\n              <PostAuthor>{post.user.nickname}</PostAuthor>\n              <PostDate>{new Date(createdAt).toLocaleString()}</PostDate>\n            </PostCreated>\n            <PostBody>{body}</PostBody>\n            {user && user.id === userId && (\n              <PostActions>\n                <Link to={`/edit-post/${id}`}>\n                  <PostActionBtn>\n                    Edit\n                  </PostActionBtn>\n                </Link>\n                <PostActionBtn onClick={handleDelClick}>Delete</PostActionBtn>\n              </PostActions>\n            )}\n\n          </PostWrapper>\n\n        </>\n      )}\n    </>\n  )\n}\n\nexport default PostPage","import { useState } from \"react\"\nimport styled from \"@emotion/styled\"\nimport { useHistory } from \"react-router-dom\"\nimport { newPost } from \"../../redux/reducers/postReducer\"\nimport { useDispatch } from 'react-redux'\n\nconst FormWrapper = styled.form`\n  max-width:960px;\n  margin:30px auto;\n  box-shadow:0 4px 10px 0 rgb(0 0 0 / 20%), 0 4px 20px 0 rgb(0 0 0 / 19%);\n  padding:30px 20px;\n  background-color:#fff;\n  text-align:center;\n\n  & div + div {\n    margin:40px auto;\n  }\n`\n\nconst Button = styled.button`\n  margin-top:60px;\n  padding:8px 24px;\n  border:1px solid #ccc;\n  cursor:pointer;\n  background-color:#fff;\n  border-radius:4px;\n  font-weight:bold;\n  font-size:18px;\n  color:rgba(0,0,0, 0.6);\n  transition:background-color 0.2s;\n  \n  & + & {\n    margin-left:20px;\n  }\n\n  &:hover {\n    background-color:#ccc;\n  }\n`\nconst InputTItle = styled.label`\n  font-weight:bold;\n  font-size:18px;\n  color:rgba(0,0,0, 0.6);\n  \n  & input{\n    display:block;\n    margin:20px  auto;\n    width:80%;\n  }\n\n  & textarea{\n    display:block;\n    margin:20px auto;\n    width:80%;\n  }\n`\nconst ButtonWrapper = styled.div`\n  text-align: center;\n`\nconst ErrorMsg = styled.div`\n  margin-top:20px;\n  color:#ef4a52;\n`\n\n\n\nconst AddNewPostPage = () => {\n  const [postTitle, setPostTitle] = useState('')\n  const [postBody, setPostBody] = useState('')\n  const [errorMsg, setErrorMsg] = useState()\n  const history = useHistory()\n\n  const dispatch = useDispatch()\n\n  const handleSubmit = async () => {\n    setErrorMsg(null)\n    if (!postTitle || !postBody) return setErrorMsg('請填入完整內容')\n\n\n    try {\n      const result = await dispatch(newPost(postTitle, postBody))\n      if (result.ok === 0) return setErrorMsg(result.message)\n      history.push('/posts/' + result.id)\n    } catch {\n      setErrorMsg('請稍後再試試看')\n    }\n  }\n\n  const handleCleanClick = () => {\n    setPostTitle('')\n    setPostBody('')\n    setErrorMsg('')\n  }\n\n  return (\n    <FormWrapper onSubmit={handleSubmit}>\n      <div>\n        <InputTItle>文章標題\n          <input value={postTitle} onChange={e => setPostTitle(e.target.value)} />\n        </InputTItle>\n      </div>\n      <div>\n        <InputTItle>\n          文章內容\n          <textarea value={postBody} rows={'10'} onChange={e => setPostBody(e.target.value)} />\n        </InputTItle>\n      </div>\n      <ButtonWrapper>\n        <Button type=\"submit\">新增文章</Button>\n        <Button type=\"button\" onClick={handleCleanClick}>重新填寫</Button>\n        {errorMsg && <ErrorMsg>{errorMsg}</ErrorMsg>}\n      </ButtonWrapper>\n    </FormWrapper>\n  )\n}\n\nexport default AddNewPostPage","import { useState, useEffect } from \"react\"\nimport styled from \"@emotion/styled\"\nimport { useHistory } from \"react-router-dom\"\n\nimport { register, setErrorMsg, getUser } from '../../redux/reducers/userReducer'\nimport { useDispatch, useSelector } from \"react-redux\"\n\n\nconst FormContainer = styled.form`\n  max-width:960px;\n  margin:30px auto;\n  box-shadow:0 4px 10px 0 rgb(0 0 0 / 20%), 0 4px 20px 0 rgb(0 0 0 / 19%);\n  text-align:center;\n  padding:30px 0;\n  background-color:#fff;\n\n  & div + div {\n    margin-top:20px;\n  }\n`\nconst Button = styled.button`\n  margin-top:60px;\n  padding:8px 24px;\n  border:1px solid #ccc;\n  cursor:pointer;\n  background-color:#fff;\n  border-radius:4px;\n  font-weight:bold;\n  font-size:18px;\n  color:rgba(0,0,0, 0.6);\n  transition:background-color 0.2s;\n  margin-left:20px;\n  \n  &:hover {\n    background-color:#ccc;\n  }\n\n`\nconst InputTItle = styled.label`\n  font-weight:bold;\n  font-size:18px;\n  color:rgba(0,0,0, 0.6);\n  & input{\n    margin:0 12px;\n  }\n`\nconst ErrorMsg = styled.div`\n  margin-top:20px;\n  color:#ef4a52;\n`\n\n\nconst RegisterPage = () => {\n  const [username, setUsername] = useState('')\n  const [nickname, setNickname] = useState('')\n  const [password, setPassword] = useState('')\n  const [password2, setPassword2] = useState('')\n  const errorMsg = useSelector(store => store.user.errorMsg)\n  const dispatch = useDispatch()\n  const history = useHistory()\n\n  useEffect(() => {\n    return () => dispatch(setErrorMsg(null))\n  }, [dispatch])\n\n\n  const handleSubmit = async (e) => {\n    if (!username || !nickname || !password || !password2) return dispatch(setErrorMsg('請填入完整資料'))\n\n    if (password !== password2) return dispatch(setErrorMsg('請確認兩次密碼是否相符'))\n    try {\n      const registerRes = await dispatch(register(username, nickname, password))\n      const getUserRes = await dispatch(getUser())\n      console.log(registerRes.ok === 1 && getUserRes.ok === 1)\n      if (registerRes.ok === 1 && getUserRes.ok === 1) {\n        history.push('/')\n      }\n    } catch {\n      dispatch(setErrorMsg('請稍後再登入看看'))\n    }\n  }\n\n  const handleResetClick = () => {\n    dispatch(setErrorMsg(null))\n    setUsername('')\n    setNickname('')\n    setPassword('')\n    setPassword2('')\n  }\n  return (\n    <FormContainer onSubmit={handleSubmit}>\n      <div>\n        <InputTItle>username\n          <input value={username} onChange={e => setUsername(e.target.value)} />\n        </InputTItle>\n      </div>\n      <div>\n        <InputTItle>nickname\n          <input value={nickname} onChange={e => setNickname(e.target.value)} />\n        </InputTItle>\n      </div>\n      <div>\n        <InputTItle>\n          password\n          <input type=\"password\" value={password} onChange={e => setPassword(e.target.value)} />\n        </InputTItle>\n      </div>\n      <div>\n        <InputTItle>\n          comfirm password\n          <input type=\"password\" value={password2} onChange={e => setPassword2(e.target.value)} />\n        </InputTItle>\n      </div>\n      <Button type=\"reset\" onClick={handleResetClick}>Reset</Button>\n      <Button type=\"submit\">Register</Button>\n      {errorMsg && <ErrorMsg>{errorMsg}</ErrorMsg>}\n\n    </FormContainer>\n  )\n}\n\nexport default RegisterPage","import { useEffect } from \"react\"\nimport styled from \"@emotion/styled\"\nimport { Link } from \"react-router-dom\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { getAllPosts, deletePost } from '../../redux/reducers/postReducer'\n\nconst PostsWrapper = styled.main`\n  max-width:960px;\n  margin:30px auto;\n`\nconst PostWrapper = styled.div`\n  box-shadow: 0 4px 10px 0 rgb(0 0 0 / 20%), 0 4px 20px 0 rgb(0 0 0 / 19%);\n  padding:30px ;\n  background:#fff;\n  & + & {\n    margin-top:20px;\n  }\n  position:relative;\n`\n\nconst PostTitle = styled(Link)`\n  font-size:28px;\n  color:#000;\n  text-decoration:none;\n  overflow: hidden;\n    white-space: nowrap;\n    width: 80%;\n    text-overflow: ellipsis;\n    display: block;\n`\nconst PostCreated = styled.div`\n  display:flex;\n  margin-top:12px;\n`\nconst PostAuthor = styled.div`\n  margin-right:12px;\n`\n\nconst PostDate = styled.div`\n  font-weight:300;\n  color:rgba(0,0,0,0.6);\n  font-size:16px;\n`\nconst PostBody = styled.div`\n  margin-top:30px;\n  font-size:18px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  display: -webkit-box;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n`\nconst LinkToPost = styled(Link)`\n  margin-top:30px;\n  display:inline-block;\n  color:rgba(0,0,0,0.6);\n  text-decoration:none;\n  border:1px solid #ccc;\n  padding:8px 24px;\n  background:#fff;\n  cursor:pointer;\n  transition: background 0.2s;\n  &:hover{\n    background:#ccc;\n  }\n`\nconst PostActions = styled.div`\n  position:absolute;\n  right: 30px;\n  bottom: 30px;\n`\nconst PostActionBtn = styled.button`\n  margin-top:30px;\n  margin-left:8px;\n  display:inline-block;\n  color:rgba(0,0,0,0.6);\n  text-decoration:none;\n  border:1px solid #ccc;\n  padding:8px 24px;\n  background:#fff;\n  cursor:pointer;\n  transition: background 0.2s;\n  &:hover{\n    background:#ccc;\n  }\n  \n`\n\n\nconst PostsListPage = () => {\n  const dispatch = useDispatch()\n  const isLoading = useSelector(store => store.posts.isLoadingPost)\n  const posts = useSelector(store => store.posts.posts)\n  const user = useSelector(store => store.user.user)\n\n  useEffect(() => {\n    dispatch(getAllPosts())\n  }, [dispatch])\n\n  const handleDelClick = (id) => {\n    dispatch(deletePost(id))\n      .then(res => dispatch(getAllPosts()))\n  }\n\n  const Post = ({ post }) => {\n    const { title, createdAt, id, body, userId } = post\n    return (\n      <>\n        <PostWrapper>\n          <PostTitle to={`/posts/${id}`}>{title}</PostTitle>\n          <PostCreated>\n            <PostAuthor>{post.user.nickname}</PostAuthor>\n\n            <PostDate>{new Date(createdAt).toLocaleString()}</PostDate>\n          </PostCreated>\n          <PostBody>{body}</PostBody>\n          <LinkToPost to={`/posts/${id}`}>Read More</LinkToPost>\n          {user && user.id === userId && (\n            <PostActions>\n              <Link to={`/edit-post/${id}`}>\n                <PostActionBtn>\n                  Edit\n                </PostActionBtn>\n              </Link>\n              <Link to={`/posts-list`} replace>\n\n                <PostActionBtn onClick={() => handleDelClick(id)}>Delete</PostActionBtn>\n              </Link>\n\n            </PostActions>\n          )}\n        </PostWrapper>\n      </>\n    )\n  }\n\n  return (\n    <>\n      {isLoading ? <div>Loading...</div> : (\n        <PostsWrapper>\n          {posts.map(post => (\n            < Post post={post} key={post.id} />\n          ))}\n        </PostsWrapper>\n      )}\n    </>\n  )\n}\n\nexport default PostsListPage","import React, { useEffect, useState } from \"react\";\nimport styled from \"@emotion/styled\"\nimport { useParams } from \"react-router\";\nimport { getPost, patchPost } from \"../../redux/reducers/postReducer\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\"\n\n\nconst FormWrapper = styled.form`\n  max-width:960px;\n  margin:30px auto;\n  box-shadow:0 4px 10px 0 rgb(0 0 0 / 20%), 0 4px 20px 0 rgb(0 0 0 / 19%);\n  padding:30px 20px;\n  background-color:#fff;\n  text-align:center;\n\n  & div + div {\n    margin:40px auto;\n  }\n`\n\nconst Button = styled.button`\n  margin-top:60px;\n  padding:8px 24px;\n  border:1px solid #ccc;\n  cursor:pointer;\n  background-color:#fff;\n  border-radius:4px;\n  font-weight:bold;\n  font-size:18px;\n  color:rgba(0,0,0, 0.6);\n  transition:background-color 0.2s;\n  \n  & + & {\n    margin-left:20px;\n  }\n\n  &:hover {\n    background-color:#ccc;\n  }\n`\nconst InputTItle = styled.label`\n  font-weight:bold;\n  font-size:18px;\n  color:rgba(0,0,0, 0.6);\n  \n  & input{\n    display:block;\n    margin:20px  auto;\n    width:80%;\n  }\n\n  & textarea{\n    display:block;\n    margin:20px auto;\n    width:80%;\n  }\n`\nconst ButtonWrapper = styled.div`\n  text-align: center;\n`\nconst ErrorMsg = styled.div`\n  margin-top:20px;\n  color:#ef4a52;\n`\n\nconst EditPostPage = () => {\n  const [errorMsg, setErrorMsg] = useState()\n  const [editedTitle, setEditedTitle] = useState('')\n  const [editedBody, setEditedBody] = useState('')\n\n  const history = useHistory()\n  let { id } = useParams()\n  const dispatch = useDispatch()\n\n  const isLoading = useSelector(store => store.posts.isLoadingPost)\n  const post = useSelector(store => store.posts.post)\n\n\n\n  useEffect(() => {\n    dispatch(getPost(id))\n  }, [id, dispatch])\n\n  const handleSubmit = async () => {\n    setErrorMsg(null)\n    if (!editedTitle || !editedBody) return setErrorMsg('請填入完整內容')\n    try {\n      const result = await dispatch(patchPost(id, { editedTitle, editedBody }))\n      history.push('/posts/' + result.id)\n    } catch {\n      setErrorMsg('請稍後再試試看')\n    }\n  }\n\n  const handleCleanClick = () => {\n    setEditedTitle('')\n    setEditedBody('')\n    setErrorMsg('')\n  }\n  return (\n    <>\n      {isLoading ? <div>Loading...</div> : (\n        <FormWrapper onSubmit={handleSubmit}>\n          <div>\n            <InputTItle>文章標題\n              <input\n                value={editedTitle}\n                onChange={e => setEditedTitle(e.target.value)}\n                placeholder={post.title}\n              />\n            </InputTItle>\n          </div>\n          <div>\n            <InputTItle>\n              文章內容\n              <textarea\n                value={editedBody}\n                rows={'10'}\n                onChange={e => setEditedBody(e.target.value)}\n                placeholder={post.body}\n              />\n            </InputTItle>\n          </div>\n          <ButtonWrapper>\n            <Button type=\"submit\">確定修改</Button>\n            <Button type=\"button\" onClick={handleCleanClick}>重新填寫</Button>\n            {errorMsg && <ErrorMsg>{errorMsg}</ErrorMsg>}\n          </ButtonWrapper>\n        </FormWrapper>\n      )\n      }\n    </>\n  )\n}\n\nexport default EditPostPage","import React, { useEffect } from 'react'\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n} from 'react-router-dom'\n\nimport Header from '../Header'\nimport HomePage from '../../pages/HomePage'\nimport LoginPage from '../../pages/LoginPage'\nimport About from '../../pages/AboutPage'\nimport { getAuthToken } from '../../utils'\nimport PostPage from '../../pages/PostPage'\nimport AddNewPostPage from '../../pages/AddNewPostPage'\nimport RegisterPage from '../../pages/RegisterPage'\nimport PostsListPage from '../../pages/PostsListPage/AllPostsPage'\nimport EditPostPage from '../../pages/EditPostPage'\nimport { useDispatch } from 'react-redux'\nimport { getUser } from '../../redux/reducers/userReducer'\nconst App = () => {\n  const dispatch = useDispatch()\n  useEffect(() => {\n    if (getAuthToken()) {\n      dispatch(getUser())\n    }\n  }, [dispatch])\n\n  return (\n    <Router>\n      <Header />\n\n      <Switch>\n        <Route exact path=\"/\">\n          <HomePage />\n        </Route>\n        <Route path=\"/about\">\n          <About />\n        </Route>\n        <Route path=\"/login\">\n          <LoginPage />\n        </Route>\n        <Route path=\"/posts/:id\" children={<PostPage />} />\n        <Route path=\"/posts-list\">\n          <PostsListPage />\n        </Route>\n        <Route path=\"/new-post\">\n          <AddNewPostPage />\n        </Route>\n        <Route path=\"/edit-post/:id\" children={<EditPostPage />} />\n        <Route path=\"/register\">\n          <RegisterPage />\n        </Route>\n      </Switch>\n    </Router>\n  )\n}\n\nexport default App","import { configureStore } from '@reduxjs/toolkit'\nimport postReducer from './reducers/postReducer'\nimport userReducer from './reducers/userReducer'\n\nexport default configureStore({\n  reducer: {\n    posts: postReducer,\n    user: userReducer\n  }\n})","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './normalize.css'\nimport './style.css'\nimport App from './components/App/index'\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)"],"sourceRoot":""}